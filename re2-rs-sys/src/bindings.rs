#[allow(dead_code)]
/* automatically generated by rust-bindgen 0.72.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RE2Wrapper {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct re2_span_t {
    pub start: usize,
    pub len: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of re2_span_t"][::std::mem::size_of::<re2_span_t>() - 16usize];
    ["Alignment of re2_span_t"][::std::mem::align_of::<re2_span_t>() - 8usize];
    ["Offset of field: re2_span_t::start"][::std::mem::offset_of!(re2_span_t, start) - 0usize];
    ["Offset of field: re2_span_t::len"][::std::mem::offset_of!(re2_span_t, len) - 8usize];
};
unsafe extern "C" {
    pub fn re2_new(
        pattern: *const ::std::os::raw::c_char,
        pattern_len: usize,
        err_ptr: *mut *const ::std::os::raw::c_char,
        err_len: *mut usize,
    ) -> *mut RE2Wrapper;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RE2Options {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn re2_options_new() -> *mut RE2Options;
}
unsafe extern "C" {
    pub fn re2_options_delete(arg1: *mut RE2Options);
}
unsafe extern "C" {
    pub fn re2_options_set_case_sensitive(arg1: *mut RE2Options, sensitive: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn re2_options_set_posix_syntax(arg1: *mut RE2Options, posix: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn re2_options_set_longest_match(arg1: *mut RE2Options, longest: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn re2_options_set_word_boundary(o: *mut RE2Options, yes: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn re2_options_set_perl_classes(o: *mut RE2Options, yes: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn re2_new_with_options(
        pattern: *const ::std::os::raw::c_char,
        pattern_len: usize,
        opts: *const RE2Options,
        err_ptr: *mut *const ::std::os::raw::c_char,
        err_len: *mut usize,
    ) -> *mut RE2Wrapper;
}
unsafe extern "C" {
    pub fn re2_delete(re2: *mut RE2Wrapper);
}
unsafe extern "C" {
    pub fn re2_ok(re2: *const RE2Wrapper) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn re2_error(
        re2: *const RE2Wrapper,
        err_ptr: *mut *const ::std::os::raw::c_char,
        err_len: *mut usize,
    );
}
unsafe extern "C" {
    pub fn re2_full_match(
        re2: *const RE2Wrapper,
        text: *const ::std::os::raw::c_char,
        text_len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn re2_replace_one(
        re: *const RE2Wrapper,
        text: *const ::std::os::raw::c_char,
        text_len: usize,
        rewrite: *const ::std::os::raw::c_char,
        rewrite_len: usize,
        out_buf: *mut ::std::os::raw::c_char,
        out_len: usize,
        written: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn re2_replace_all(
        re: *const RE2Wrapper,
        text: *const ::std::os::raw::c_char,
        text_len: usize,
        rewrite: *const ::std::os::raw::c_char,
        rewrite_len: usize,
        out_buf: *mut ::std::os::raw::c_char,
        out_len: usize,
        written: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn re2_partial_match(
        re2: *const RE2Wrapper,
        text: *const ::std::os::raw::c_char,
        text_len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn re2_partial_match_captures(
        re2: *const RE2Wrapper,
        text: *const ::std::os::raw::c_char,
        text_len: usize,
        out_spans: *mut re2_span_t,
        out_spans_len: usize,
        written: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn re2_full_match_captures(
        re2: *const RE2Wrapper,
        text: *const ::std::os::raw::c_char,
        text_len: usize,
        out_spans: *mut re2_span_t,
        out_spans_len: usize,
        written: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn re2_group_count(re2: *const RE2Wrapper) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn re2_has_icu() -> ::std::os::raw::c_int;
}
